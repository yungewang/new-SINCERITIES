library(genlasso)  
library(glmnet)    
library(ppcor)     

SINCERITIES <- function(DATA, distance = 1, method = 1, noDIAG = 0, SIGN = 1) {
  
  # Validate input parameters
  if (!distance %in% c(1, 2, 3, 4)) {
    stop("Choose distance metric with 1, 2, 3, or 4: 1 for Kolmogorov-Smirnov (KS), 2 for Cramer-von Mises (CM),   
    3 for Anderson-Darling (AD), 4 for Mean Expression Difference")
  }
  
  if (!method %in% c(1, 2, 3, 4, 5)) {
    stop("Choose regularization regression strategy with 1 to 5: 1 for Ridge, 2 for Elastic Net (auto alpha),
    3 for Lasso, 4 for Elastic Net (manual alpha), 5 for Fused Lasso")
  }
  
  if (!noDIAG %in% c(0, 1)) {
    stop("noDIAG should be either 0 or 1")
  }
  
  if (!SIGN %in% c(0, 1)) {
    stop("SIGN should be either 0 or 1")
  }
  
  single_cell_data <- DATA$singleCELLdata
  time <- DATA$time
  numGENES <- DATA$numGENES
  num_time_points <- length(time)
  
  if (num_time_points < 5) {
    stop("DATA with a number of time points < 5. Please run SINCERITIES_CROSS_VALIDATION function")
  }
  
  DISTANCE_matrix <- matrix(0, nrow = num_time_points - 1, ncol = numGENES)
  
  for (ti in 1:(num_time_points - 1)) {
    data_ti <- t(single_cell_data[[ti]])
    data_ti_plus1 <- t(single_cell_data[[ti + 1]])
    
    for (gi in 1:numGENES) {
      p1 <- data_ti[gi, ]
      p2 <- data_ti_plus1[gi, ]
      if (distance == 1) {
        DISTANCE_matrix[ti, gi] <- ks.test(p1, p2)$statistic
      } else if (distance == 2) {
        DISTANCE_matrix[ti, gi] <- cmtest2(p1, p2)$CM_limiting_stat
      } else if (distance == 3) {
        DISTANCE_matrix[ti, gi] <- ad.test(p1, p2)$ad[2, 1]
      } else if (distance == 4) {
        DISTANCE_matrix[ti, gi] <- abs(mean(p1) - mean(p2))
      }
    }
  }

  deltaT <- replicate(dim(DISTANCE_matrix)[2], time[2:length(time)] - time[1:(length(time) - 1)])
  DISTANCE_matrix <- DISTANCE_matrix / deltaT
  
  X_matrix <- DISTANCE_matrix[1:(num_time_points - 2), ]
  Y_matrix <- DISTANCE_matrix[2:(num_time_points - 1), ]
  
  pred_lambda_min <- matrix(0, nrow = numGENES, ncol = numGENES)
  lambda_res <- numeric(numGENES)
  alpha_res <- numeric(numGENES)
  

  for (gi in 1:numGENES) {
    
    Y_vector <- Y_matrix[, gi]
    
    if (method == 5) {  # Fused Lasso
      #fused_lasso_result <- fusedlasso1d(y = Y_vector, X = X_matrix)
      #beta <- coef(fused_lasso_result, lambda = "min")
      #pred_lambda_min[, gi] <- beta
      
      fused_lasso_result <- fusedlasso1d(y = Y_vector, X = X_matrix)
      
      lambda_vals <- fused_lasso_result$lambda
      if (all(lambda_vals <= 0)) {
        stop("No valid positive lambda values found for Fused Lasso.")
      }

      chosen_lambda <- max(lambda_vals[lambda_vals > 0], na.rm = TRUE)
      
      beta_list <- coef(fused_lasso_result, lambda = chosen_lambda)
      
      beta <- as.vector(beta_list$beta) 
      if (length(beta) != ncol(pred_lambda_min)) {
        stop("Dimension mismatch between coefficients and pred_lambda_min. Check input data.")
      }
      
      pred_lambda_min[, gi] <- beta  
    #}
    } else {
     
      alphas <- if (method == 1) {
        0  # Ridge
      } else if (method == 2) {
        seq(0, 1, 0.1)  # Elastic Net (auto alpha)
      } else if (method == 3) {
        1  # Lasso
      } else {
        input <- readline(" *** Please input manually the alpha values (between 0 and 1) separated by commas: ")
        as.numeric(unlist(strsplit(input, ',')))
      }
      
      lambda <- vector()
      cvERROR <- vector()
      beta <- matrix(0, nrow = ncol(X_matrix), ncol = length(alphas))
      
      for (test in seq_along(alphas)) {
        if (noDIAG == 1) {
          CV_results <- cv.glmnet(X_matrix, Y_vector, alpha = alphas[test], exclude = gi, nfolds = nrow(X_matrix))
        } else {
          CV_results <- cv.glmnet(X_matrix, Y_vector, alpha = alphas[test], nfolds = nrow(X_matrix))
        }
        
        lambda[test] <- CV_results$lambda.min
        cvERROR[test] <- CV_results$cvm[CV_results$lambda == CV_results$lambda.min]
        coef_results <- coef(CV_results, s = "lambda.min")
        beta[coef_results@i[-1], test] <- coef_results@x[-1]
      }
      

      minIdx <- which.min(cvERROR)
      lambda_res[gi] <- lambda[minIdx]
      alpha_res[gi] <- alphas[minIdx]
      pred_lambda_min[, gi] <- beta[, minIdx]
    }
  }

  if (SIGN == 1) {
    parcorr_matrix <- pcor(DATA$totDATA, method = "spearman")$estimate
    pred_lambda_min <- pred_lambda_min * sign(parcorr_matrix)
  }
  
  result <- list(DISTANCE_matrix = DISTANCE_matrix, adj_matrix = pred_lambda_min)
  return(result)
}
